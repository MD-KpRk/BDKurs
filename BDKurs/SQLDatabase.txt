use master
alter database LibraryDB set single_user with rollback immediate 
drop database IF EXISTS LibraryDB
GO

CREATE DATABASE LibraryDB;
GO

USE LibraryDB;
GO

SELECT SYSTEM_USER;
GO
-- Таблица Gender
CREATE TABLE Genders (
    GenderID INT PRIMARY KEY IDENTITY(1,1),
    [Name] VARCHAR(10) NOT NULL
);
GO

-- Таблица Publishers
CREATE TABLE Publishers (
    PublisherID INT PRIMARY KEY IDENTITY(1,1),
    [Name] VARCHAR(120) NOT NULL,
    [Address] VARCHAR(120),
    Phone VARCHAR(30),
    Email VARCHAR(30)
);
GO

-- Таблица Authors
CREATE TABLE Authors (
    AuthorID INT PRIMARY KEY IDENTITY(1,1),
    FirstName VARCHAR(30) NOT NULL,
    LastName VARCHAR(30) NOT NULL,
    MiddleName VARCHAR(30),
    BirthDate DATE,
    Biography VARCHAR(200),
    GenderID INT FOREIGN KEY REFERENCES Genders(GenderID)
);
GO

-- Таблица Genres
CREATE TABLE Genres (
    GenreID INT PRIMARY KEY IDENTITY(1,1),
    [Name] VARCHAR(20) NOT NULL
);
GO

-- Таблица Statuses
CREATE TABLE Statuss (
    StatusID INT PRIMARY KEY IDENTITY(1,1),
    [Name] VARCHAR(20) NOT NULL
);
GO

-- Таблица Books
CREATE TABLE Books (
    ISBN VARCHAR(20) PRIMARY KEY,
    Title VARCHAR(120) NOT NULL,
    PublicationYear INT,
    PublisherID INT FOREIGN KEY REFERENCES Publishers(PublisherID),
    AuthorID INT FOREIGN KEY REFERENCES Authors(AuthorID),
    StatusID INT FOREIGN KEY REFERENCES Statuss(StatusID),
    GenreID INT FOREIGN KEY REFERENCES Genres(GenreID)
);
GO

-- Таблица ReaderCategories
CREATE TABLE ReaderCategorys (
    ReaderCategoryID INT PRIMARY KEY IDENTITY(1,1),
    [Name] VARCHAR(30) NOT NULL
);
GO

-- Таблица Readers
CREATE TABLE Readers (
    ReaderID INT PRIMARY KEY IDENTITY(1,1),
    FirstName VARCHAR(30) NOT NULL,
    LastName VARCHAR(30) NOT NULL,
    MiddleName VARCHAR(30),
    BirthDate DATE,
    [Address] VARCHAR(120),
    Phone VARCHAR(30),
    Email VARCHAR(30),
    GenderID INT FOREIGN KEY REFERENCES Genders(GenderID),
    ReaderCategoryID INT FOREIGN KEY REFERENCES ReaderCategorys(ReaderCategoryID)
);
GO

-- Таблица Positions
CREATE TABLE Positions (
    PositionID INT PRIMARY KEY IDENTITY(1,1),
    [Name] VARCHAR(30) NOT NULL
);
GO

-- Таблица AccessCategories
CREATE TABLE AccessCategorys (
    AccessCategoryID INT PRIMARY KEY IDENTITY(1,1),
    [Name] VARCHAR(30) NOT NULL,
	AddAcess BIT NOT NULL,
	EditAcess BIT NOT NULL,
	DeleteAcess BIT NOT NULL
);
GO

-- Таблица Employees
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY IDENTITY(1,1),
    FirstName VARCHAR(30) NOT NULL,
    LastName VARCHAR(30) NOT NULL,
    MiddleName VARCHAR(30),
	Passw VARCHAR(20) NOT NULL,
    Phone VARCHAR(30),
    Email VARCHAR(30),
    GenderID INT FOREIGN KEY REFERENCES Genders(GenderID) NOT NULL,
    PositionID INT FOREIGN KEY REFERENCES Positions(PositionID) NOT NULL,
    AccessCategoryID INT FOREIGN KEY REFERENCES AccessCategorys(AccessCategoryID) NOT NULL
);
GO

-- Таблица BookOrder
CREATE TABLE BookOrders (
    BookOrderID INT PRIMARY KEY IDENTITY(1,1),
    BookOrderDate DATE NOT NULL,
    ReturnDate DATE NOT NULL,
    ActualReturnDate DATE,
    BookID VARCHAR(20) FOREIGN KEY REFERENCES Books(ISBN) NOT NULL,
    ReaderID INT FOREIGN KEY REFERENCES Readers(ReaderID) NOT NULL ,
    EmployeeID INT FOREIGN KEY REFERENCES Employees(EmployeeID) NOT NULL
);
GO


-- ПРОЦЕДУРЫ

CREATE PROCEDURE AddReader
    @FirstName VARCHAR(30),
    @LastName VARCHAR(30),
    @MiddleName VARCHAR(30),
    @BirthDate DATE,
    @Address VARCHAR(120),
    @Phone VARCHAR(30),
    @Email VARCHAR(30),
    @GenderID INT,
    @ReaderCategoryID INT
AS
BEGIN
    INSERT INTO Readers (FirstName, LastName, MiddleName, BirthDate, [Address], Phone, Email, GenderID, ReaderCategoryID)
    VALUES (@FirstName, @LastName, @MiddleName, @BirthDate, @Address, @Phone, @Email, @GenderID, @ReaderCategoryID);
    
    PRINT 'Читатель ' + @FirstName + ' ' + @LastName + ' добавлен.';
END;
GO

CREATE PROCEDURE UpdateBookInfo
    @ISBN VARCHAR(20),
    @Title VARCHAR(120),
    @PublicationYear INT,
    @PublisherID INT,
    @AuthorID INT,
    @StatusID INT,
    @GenreID INT
AS
BEGIN
    UPDATE Books
    SET Title = @Title,
        PublicationYear = @PublicationYear,
        PublisherID = @PublisherID,
        AuthorID = @AuthorID,
        StatusID = @StatusID,
        GenreID = @GenreID
    WHERE ISBN = @ISBN;

    PRINT 'Информация о книге с ISBN ' + @ISBN + ' обновлена.';
END;
GO

CREATE PROCEDURE DeleteBook
    @ISBN VARCHAR(20)
AS
BEGIN
    DELETE FROM BookOrders WHERE BookID = @ISBN;
    DELETE FROM Books WHERE ISBN = @ISBN;

    PRINT 'Книга с ISBN ' + @ISBN + ' удалена вместе с ее заказами.';
END;
GO


CREATE PROCEDURE IssueBook
    @BookID VARCHAR(20),
    @ReaderID INT,
    @EmployeeID INT
AS
BEGIN
    DECLARE @CurrentDate DATE = GETDATE();
    INSERT INTO BookOrders (BookOrderDate, ReturnDate, BookID, ReaderID, EmployeeID)
    VALUES (@CurrentDate, DATEADD(DAY, 14, @CurrentDate), @BookID, @ReaderID, @EmployeeID);

    UPDATE Books
    SET StatusID = (SELECT StatusID FROM Statuss WHERE [Name] = 'Выдана')
    WHERE ISBN = @BookID;

    PRINT 'Книга с ISBN ' + @BookID + ' выдана читателю с ID ' + CAST(@ReaderID AS VARCHAR) + '.';
END;
GO

CREATE PROCEDURE ReturnBook
    @BookOrderID INT
AS
BEGIN
    DECLARE @BookID VARCHAR(20);
    SELECT @BookID = BookID FROM BookOrders WHERE BookOrderID = @BookOrderID;

    UPDATE BookOrders
    SET ActualReturnDate = GETDATE()
    WHERE BookOrderID = @BookOrderID;

    UPDATE Books
    SET StatusID = (SELECT StatusID FROM Statuss WHERE [Name] = 'Доступна')
    WHERE ISBN = @BookID;

    PRINT 'Книга с ISBN ' + @BookID + ' возвращена.';
END;
GO




-- ТРИГГЕРЫ

CREATE TRIGGER trg_CheckPublicationYear
ON Books
FOR INSERT
AS
BEGIN
    DECLARE @PublicationYear INT;
    SELECT @PublicationYear = PublicationYear FROM inserted;
    
    IF @PublicationYear > YEAR(GETDATE())
    BEGIN
        RAISERROR ('Год публикации не может превышать текущий год.', 16, 1);
        ROLLBACK TRANSACTION;
    END
END;
GO

-- обновляет поле ActualReturnDate, если книга возвращена.

CREATE TRIGGER trg_UpdateActualReturnDate
ON BookOrders
AFTER UPDATE
AS
BEGIN
    IF EXISTS (SELECT * FROM inserted WHERE ActualReturnDate IS NULL AND ReturnDate < GETDATE())
    BEGIN
        UPDATE BookOrders
        SET ActualReturnDate = GETDATE()
        WHERE BookOrderID IN (SELECT BookOrderID FROM inserted WHERE ActualReturnDate IS NULL AND ReturnDate < GETDATE());
    END
END;
GO


-- Триггер на удаление книг после удаления издателя
CREATE TRIGGER trg_DeleteBooksOnPublisherDelete
ON Publishers
FOR DELETE
AS
BEGIN
    DECLARE @PublisherID INT;
    SELECT @PublisherID = PublisherID FROM deleted;
    
    DELETE FROM Books
    WHERE PublisherID = @PublisherID;
END;
GO

--Этот триггер предотвращает создание заказа на книгу, если ее статус показывает, что она уже выдана (например, статус "Выдано").
CREATE TRIGGER trg_CheckBookAvailability
ON BookOrders
FOR INSERT
AS
BEGIN
    DECLARE @BookID VARCHAR(20);
    DECLARE @StatusID INT;
    
    -- Получаем ID книги из вставляемой записи
    SELECT @BookID = BookID FROM inserted;
    
    -- Проверяем статус книги
    SELECT @StatusID = StatusID FROM Books WHERE ISBN = @BookID;
    
    -- Если статус книги "Выдано", то запретить создание заказа
    IF EXISTS (SELECT * FROM Statuss WHERE StatusID = @StatusID AND [Name] = 'Выдана')
    BEGIN
        RAISERROR ('Книга с ISBN %s уже выдана и недоступна для заказа.', 16, 1, @BookID);
        ROLLBACK TRANSACTION;
    END
END;
GO

--обновляет статус книги на "выдано" при создании записи о заказе книги.

CREATE TRIGGER trg_UpdateBookStatusOnOrder
ON BookOrders
FOR INSERT, UPDATE
AS
BEGIN
    PRINT 'Триггер обновления статуса книги срабатывает.';

    -- Обновляем статус для книг в заказах с актуальной датой возврата
    UPDATE Books
    SET StatusID = (SELECT StatusID FROM Statuss WHERE [Name] = 'Доступна')
    WHERE ISBN IN (
        SELECT BookID FROM inserted
        WHERE ActualReturnDate IS NOT NULL
    );

    -- Обновляем статус для всех книг, указанных в вставляемых заказах
    UPDATE Books
    SET StatusID = (SELECT StatusID FROM Statuss WHERE [Name] = 'Выдана')
    WHERE ISBN IN (
        SELECT BookID FROM inserted
        WHERE ActualReturnDate IS NULL
    );

    PRINT 'Статус книг обновлён для всех заказов.';
END;
GO



INSERT INTO Genders ([Name])
VALUES 
('Мужской'),
('Женский'),
('Неизвестен');
GO

INSERT INTO Publishers ([Name], [Address], Phone, Email)
VALUES
('Эксмо', 'Москва, ул. Издательская, д. 15', '+7 495 123-45-67', 'contact@eksmo.ru'),
('АСТ', 'Москва, ул. Пушкина, д. 20', '+7 495 234-56-78', 'info@ast.ru'),
('Рипол Классик', 'Санкт-Петербург, ул. Литературная, д. 5', '+7 812 987-65-43', 'support@ripol.ru'),
('Молодая гвардия', 'Москва, ул. Советская, д. 1', '+7 495 111-22-33', 'info@molgvard.ru'),
('Азбука', 'Санкт-Петербург, ул. Пролетарская, д. 10', '+7 812 123-12-12', 'azbuka@publishing.ru'),
('Феникс', 'Ростов-на-Дону, ул. Красная, д. 3', '+7 863 123-45-67', 'contact@fenix.ru'),
('Питер', 'Санкт-Петербург, ул. Лермонтова, д. 17', '+7 812 654-32-10', 'info@piter.ru'),
('Вече', 'Москва, ул. Тверская, д. 6', '+7 495 765-43-21', 'veche@publishing.ru'),
('Олма', 'Москва, ул. Академическая, д. 2', '+7 495 654-32-11', 'olma@publishing.ru'),
('Мир детства', 'Москва, ул. Мира, д. 9', '+7 495 321-45-67', 'childworld@pub.ru'),
('Бомбора', 'Москва, ул. Солнечная, д. 7', '+7 495 765-12-34', 'bombora@pub.ru'),
('Т8', 'Москва, ул. Новая, д. 12', '+7 495 765-43-65', 'info@t8books.ru'),
('Энигма', 'Москва, ул. Рекламная, д. 4', '+7 495 321-32-12', 'contact@enigma.ru'),
('Литрес', 'Москва, ул. Библиотечная, д. 3', '+7 495 543-65-87', 'info@litres.ru'),
('МИФ', 'Москва, ул. Летняя, д. 11', '+7 495 987-65-32', 'myth@pub.ru'),
('Росмэн', 'Москва, ул. Детская, д. 22', '+7 495 432-21-21', 'contact@rosmen.ru');
GO

INSERT INTO Authors (FirstName, LastName, MiddleName, BirthDate, Biography, GenderID)
VALUES
('Александр', 'Пушкин', 'Сергеевич', '1799-06-06', 'Великий русский поэт, писатель и драматург', 1),
('Лев', 'Толстой', 'Николаевич', '1828-09-09', 'Один из крупнейших русских писателей, автор романов "Война и мир", "Анна Каренина"', 1),
('Фёдор', 'Достоевский', 'Михайлович', '1821-11-11', 'Известный русский писатель, автор романов "Преступление и наказание", "Идиот"', 1),
('Антон', 'Чехов', 'Павлович', '1860-01-29', 'Русский писатель и драматург, мастер короткого рассказа', 1),
('Максим', 'Горький', 'Алексевич', '1868-03-28', 'Русский писатель, драматург и публицист', 1),
('Иван', 'Тургенев', 'Сергеевич', '1818-11-09', 'Русский писатель, автор романа "Отцы и дети"', 1),
('Николай', 'Гоголь', 'Васильевич', '1809-04-01', 'Русский писатель, драматург и поэт', 1),
('Анна', 'Ахматова', 'Андреевна', '1889-06-23', 'Русская поэтесса, одна из самых значительных поэтов 20 века', 2),
('Михаил', 'Булгаков', 'Афанасьевич', '1891-05-15', 'Русский писатель, автор романа "Мастер и Маргарита"', 1),
('Марина', 'Цветаева', 'Ивановна', '1892-10-08', 'Русская поэтесса и писательница', 2),
('Александр', 'Блок', 'Александрович', '1880-11-28', 'Русский поэт, представитель символизма', 1),
('Владимир', 'Маяковский', 'Владимирович', '1893-07-19', 'Русский поэт, драматург и актер', 1),
('Иван', 'Бунин', 'Алексеевич', '1870-10-22', 'Русский писатель и поэт, лауреат Нобелевской премии по литературе', 1),
('Александр', 'Солженицын', 'Исаевич', '1918-12-11', 'Русский писатель и историк, лауреат Нобелевской премии', 1),
('Борис', 'Пастернак', 'Леонидович', '1890-02-10', 'Русский поэт, писатель, переводчик, автор романа "Доктор Живаго"', 1),
('Иосиф', 'Бродский', 'Александрович', '1940-05-24', 'Русский поэт и эссеист, лауреат Нобелевской премии', 1),
('Владимир', 'Набоков', 'Владимирович', '1899-04-23', 'Русский и американский писатель, автор романа "Лолита"', 1),
('Михаил', 'Шолохов', 'Александрович', '1905-05-24', 'Русский писатель, лауреат Нобелевской премии', 1),
('Татьяна', 'Толстая', 'Никитична', '1951-05-03', 'Современная русская писательница, эссеистка и телеведущая', 2),
('Дина', 'Рубина', 'Ильинична', '1953-09-19', 'Современная русская писательница', 2);
GO

INSERT INTO Genres ([Name])
VALUES
('Роман'),
('Повесть'),
('Рассказ'),
('Поэзия'),
('Фантастика'),
('Фэнтези'),
('Детектив'),
('Исторический роман'),
('Драма'),
('Комедия'),
('Публицистика'),
('Биография'),
('Приключения'),
('Триллер'),
('Мистика'),
('Любовный роман'),
('Юмор'),
('Научная фантастика'),
('Эссе'),
('Философия');
GO

INSERT INTO Statuss ([Name])
VALUES
('Доступна'),
('Выдана'),
('Зарезервирована'),
('В архиве'),
('Утеряна');
GO

INSERT INTO Books (ISBN, Title, PublicationYear, PublisherID, AuthorID, StatusID, GenreID)
VALUES
('978-5-17-118366-7', 'Война и мир', 1869, 1, 1, 1, 1),
('978-5-17-134149-3', 'Преступление и наказание', 1866, 1, 2, 1, 2),
('978-5-17-131177-9', 'Мастер и Маргарита', 1966, 2, 3, 1, 3),
('978-5-17-120523-9', 'Тихий Дон', 1928, 2, 4, 1, 1),
('978-5-17-133456-0', 'Доктор Живаго', 1957, 3, 5, 1, 4),
('978-5-17-121524-6', 'Анна Каренина', 1877, 3, 1, 1, 1),
('978-5-17-122599-3', '1984', 1949, 4, 2, 1, 5),
('978-5-17-133455-3', '451 градус по Фаренгейту', 1953, 4, 3, 1, 2),
('978-5-17-120527-7', 'Убить пересмешника', 1960, 5, 4, 1, 3),
('978-5-17-123600-6', 'Маленький принц', 1943, 5, 5, 1, 1),
('978-5-17-124678-3', 'Старик и море', 1952, 6, 1, 1, 6),
('978-5-17-125689-1', 'Собачье сердце', 1925, 6, 2, 1, 7),
('978-5-17-126744-5', 'Шинель', 1842, 7, 3, 1, 8),
('978-5-17-127800-1', 'Превращение', 1915, 7, 4, 1, 2),
('978-5-17-128855-5', 'Маленький принц', 1943, 8, 5, 1, 3),
('978-5-17-129900-2', 'Гордость и предубеждение', 1813, 8, 1, 1, 4),
('978-5-17-130955-3', 'Дон Кихот', 1605, 9, 2, 1, 5),
('978-5-17-131977-9', 'Отверженные', 1862, 9, 3, 1, 6),
('978-5-17-132988-3', 'В поисках утраченного времени', 1913, 10, 4, 1, 7),
('978-5-17-133999-7', 'Властелин колец', 1954, 10, 5, 1, 8);
GO


INSERT INTO ReaderCategorys ([Name])
VALUES
('Студент'),
('Преподаватель'),
('Школьник'),
('Библиотекарь'),
('Пенсионер'),
('Работник'),
('Безработный'),
('Домохозяйка'),
('Аспирант'),
('Научный сотрудник'),
('Журналист'),
('Доктор'),
('Юрист'),
('Программист'),
('Медсестра'),
('Инженер'),
('Дизайнер'),
('Архитектор'),
('Музыкант'),
('Художник');
GO

INSERT INTO Readers (FirstName, LastName, MiddleName, BirthDate, [Address], Phone, Email, GenderID, ReaderCategoryID)
VALUES
('Иван', 'Иванов', 'Иванович', '1990-01-01', 'Москва, ул. Ленина, д. 5', '+7 495 123-45-67', 'ivanov@mail.ru', 1, 1),
('Петр', 'Петров', 'Петрович', '1985-02-15', 'Санкт-Петербург, пр. Невский, д. 10', '+7 812 123-45-67', 'petrov@mail.ru', 1, 2),
('Мария', 'Смирнова', 'Ивановна', '1995-03-20', 'Москва, ул. Гоголя, д. 7', '+7 495 234-56-78', 'smirnova@mail.ru', 2, 3),
('Сергей', 'Сидоров', 'Алексеевич', '1988-04-05', 'Новосибирск, ул. Лермонтова, д. 12', '+7 383 567-89-01', 'sidorov@mail.ru', 1, 4),
('Анна', 'Кузнецова', 'Петровна', '1993-05-10', 'Казань, ул. Чайковского, д. 14', '+7 843 123-78-90', 'kuznetsova@mail.ru', 2, 5),
('Ольга', 'Новикова', 'Александровна', '1991-06-25', 'Москва, ул. Пушкина, д. 16', '+7 495 321-45-67', 'novikova@mail.ru', 2, 6),
('Алексей', 'Федоров', 'Николаевич', '1987-07-30', 'Сочи, ул. Приморская, д. 3', '+7 862 567-12-34', 'fedorov@mail.ru', 1, 7),
('Наталья', 'Михайлова', 'Владимировна', '1992-08-12', 'Москва, ул. Цветочная, д. 19', '+7 495 432-10-10', 'mihailova@mail.ru', 2, 8),
('Виктор', 'Николаев', 'Викторович', '1989-09-17', 'Екатеринбург, ул. Московская, д. 11', '+7 343 765-12-34', 'nikolaev@mail.ru', 1, 9),
('Екатерина', 'Соколова', 'Игоревна', '1994-10-01', 'Москва, ул. Тверская, д. 5', '+7 495 543-21-09', 'sokolova@mail.ru', 2, 10),
('Михаил', 'Воробьев', 'Андреевич', '1986-11-23', 'Краснодар, ул. Шевченко, д. 7', '+7 861 765-98-65', 'vorobyev@mail.ru', 1, 11),
('Татьяна', 'Козлова', 'Юрьевна', '1991-12-04', 'Москва, ул. Мира, д. 15', '+7 495 987-65-43', 'kozlova@mail.ru', 2, 12),
('Дмитрий', 'Орлов', 'Олегович', '1984-01-14', 'Москва, ул. Лесная, д. 17', '+7 495 234-56-78', 'orlov@mail.ru', 1, 13),
('Елена', 'Тимофеева', 'Сергеевна', '1990-02-25', 'Москва, ул. Кирова, д. 8', '+7 495 321-45-67', 'timofeeva@mail.ru', 2, 14),
('Юрий', 'Григорьев', 'Николаевич', '1985-03-15', 'Москва, ул. Чехова, д. 9', '+7 495 432-56-78', 'grigoriev@mail.ru', 1, 15),
('Оксана', 'Давыдова', 'Александровна', '1993-04-22', 'Москва, ул. Профсоюзная, д. 21', '+7 495 987-65-32', 'davydova@mail.ru', 2, 16),
('Никита', 'Захаров', 'Валентинович', '1992-05-05', 'Сочи, ул. Победы, д. 3', '+7 862 432-56-78', 'zakharov@mail.ru', 1, 17),
('Алла', 'Сафронова', 'Ильинична', '1991-06-18', 'Москва, ул. Ленина, д. 25', '+7 495 432-10-12', 'safronova@mail.ru', 2, 18),
('Илья', 'Кравцов', 'Михайлович', '1989-07-02', 'Москва, ул. Щербакова, д. 14', '+7 495 987-12-34', 'kravtsov@mail.ru', 1, 19),
('Ольга', 'Попова', 'Павловна', '1995-08-30', 'Москва, ул. Ленина, д. 20', '+7 495 321-45-43', 'popova@mail.ru', 2, 20);
GO

INSERT INTO Positions ([Name])
VALUES
('Библиотекарь'),
('Администратор'),
('Менеджер'),
('Заведующий'),
('Оператор'),
('Ассистент'),
('Директор'),
('Младший библиотекарь'),
('Технический сотрудник'),
('Специалист по закупкам'),
('Программист'),
('Системный администратор'),
('Редактор'),
('Контент-менеджер'),
('Охранник'),
('Кассир'),
('Архивариус'),
('Методист'),
('Бухгалтер'),
('Маркетолог');
GO

INSERT INTO AccessCategorys ([Name], AddAcess, EditAcess, DeleteAcess)
VALUES
('Полный доступ', 1, 1, 1),
('Чтение', 0, 0, 0),
('Чтение и редактирование', 0, 1, 0),
('Редактирование и удаление', 0, 1, 1),
('Администратор', 1, 1, 1),
('Ограниченный доступ', 0, 0, 0),
('Доступ к статистике', 1, 0, 0),
('Доступ к заказам', 1, 1, 0),
('Только редактирование', 0, 1, 0),
('Удаление записей', 0, 0, 1);
GO

INSERT INTO Employees (FirstName, LastName, MiddleName, Passw, Phone, Email, GenderID, PositionID, AccessCategoryID)
VALUES
('Андрей', 'Смирнов', 'Викторович', '', '+7 495 234-12-34', 'smirnov@mail.ru', 1, 1, 1),
('Ирина', 'Васильева', 'Анатольевна', 'password', '+7 495 432-56-78', 'vasilieva@mail.ru', 2, 2, 3),
('Сергей', 'Петров', 'Валерьевич', 'qwerty', '+7 495 543-21-98', 'petrov@mail.ru', 1, 3, 4),
('Марина', 'Николаева', 'Ивановна', '12345', '+7 495 765-43-21', 'nikolaeva@mail.ru', 2, 4, 5),
('Александр', 'Федоров', 'Игоревич', 'abcdef', '+7 495 876-54-32', 'fedorov@mail.ru', 1, 5, 6),
('Елена', 'Соколова', 'Петровна', 'admin', '+7 495 432-65-43', 'sokolova@mail.ru', 2, 6, 7),
('Наталья', 'Попова', 'Михайловна', 'password1', '+7 495 123-45-67', 'popova@mail.ru', 2, 7, 8),
('Михаил', 'Орлов', 'Николаевич', 'admin123', '+7 495 345-76-54', 'orlov@mail.ru', 1, 8, 9),
('Ольга', 'Волкова', 'Сергеевна', 'library', '+7 495 543-21-32', 'volkova@mail.ru', 2, 9, 10),
('Павел', 'Морозов', 'Алексеевич', 'pass789', '+7 495 654-32-10', 'morozov@mail.ru', 1, 10, 1),
('Алексей', 'Медведев', 'Дмитриевич', 'qazwsx', '+7 495 432-10-11', 'medvedev@mail.ru', 1, 11, 2),
('Татьяна', 'Кузьмина', 'Васильевна', 'password2', '+7 495 432-21-43', 'kuzmina@mail.ru', 2, 12, 3),
('Владимир', 'Семенов', 'Андреевич', 'passabc', '+7 495 432-54-32', 'semenov@mail.ru', 1, 13, 4),
('Екатерина', 'Иванова', 'Александровна', 'mypassword', '+7 495 432-76-54', 'ivanova@mail.ru', 2, 14, 5),
('Артем', 'Лебедев', 'Сергеевич', 'letmein', '+7 495 432-87-65', 'lebedev@mail.ru', 1, 15, 6),
('Мария', 'Герасимова', 'Игоревна', 'secret', '+7 495 543-32-10', 'gerasimova@mail.ru', 2, 16, 7),
('Константин', 'Зайцев', 'Владимирович', 'mypass', '+7 495 876-32-54', 'zaytsev@mail.ru', 1, 17, 8),
('Лариса', 'Карпова', 'Алексеевна', 'superpass', '+7 495 321-65-43', 'karpova@mail.ru', 2, 18, 9),
('Иван', 'Ковалев', 'Геннадьевич', 'admin2', '+7 495 876-10-11', 'kovalev@mail.ru', 1, 19, 10),
('Анастасия', 'Чернова', 'Анатольевна', 'libadmin', '+7 495 432-54-32', 'chernova@mail.ru', 2, 20, 1);
GO

INSERT INTO BookOrders (BookOrderDate, ReturnDate, ActualReturnDate, BookID, ReaderID, EmployeeID)
VALUES
('2024-01-15', '2024-02-15', NULL, '978-5-17-118366-7', 1, 1),
('2024-01-18', '2024-02-18', '2024-02-16', '978-5-17-134149-3', 2, 2),
('2024-01-20', '2024-02-20', '2024-02-19', '978-5-17-131177-9', 3, 3),
('2024-01-25', '2024-02-25', NULL, '978-5-17-120523-9', 4, 4),
('2024-02-01', '2024-03-01', '2024-02-28', '978-5-17-133456-0', 5, 5),
('2024-02-05', '2024-03-05', NULL, '978-5-17-121524-6', 6, 6),
('2024-02-10', '2024-03-10', '2024-03-08', '978-5-17-122599-3', 7, 7),
('2024-02-12', '2024-03-12', NULL, '978-5-17-133455-3', 8, 8),
('2024-02-14', '2024-03-14', '2024-03-10', '978-5-17-120527-7', 9, 9),
('2024-02-16', '2024-03-16', '2024-03-15', '978-5-17-123600-6', 10, 10),
('2024-02-18', '2024-03-18', '2024-03-17', '978-5-17-124678-3', 11, 11),
('2024-02-20', '2024-03-20', '2024-03-19', '978-5-17-125689-1', 12, 12),
('2024-02-22', '2024-03-22', NULL, '978-5-17-126744-5', 13, 13),
('2024-02-25', '2024-03-25', NULL, '978-5-17-127800-1', 14, 14),
('2024-02-28', '2024-03-28', '2024-03-25', '978-5-17-128855-5', 15, 15)
GO


DISABLE TRIGGER trg_CheckPublicationYear ON Books;
DISABLE TRIGGER trg_UpdateActualReturnDate ON BookOrders;
DISABLE TRIGGER trg_DeleteBooksOnPublisherDelete ON Publishers;
DISABLE TRIGGER trg_CheckBookAvailability ON BookOrders;
DISABLE TRIGGER trg_UpdateBookStatusOnOrder ON BookOrders;

SELECT * FROM Genders

Select * from Employees

Select * from BookOrders

select * from Readers


EXEC AddReader 
    @FirstName = 'Иван',
    @LastName = 'Петров',
    @MiddleName = 'Сергеевич',
    @BirthDate = '1990-05-15',
    @Address = 'Минск, ул. Ленина, 1',
    @Phone = '123456789',
    @Email = 'ivan.petrov@example.com',
    @GenderID = 1,
    @ReaderCategoryID = 2;



EXEC UpdateBookInfo 
    @ISBN = '978-5-17-118366-7',
    @Title = 'Новая книга',
    @PublicationYear = 2023,
    @PublisherID = 1,
    @AuthorID = 3,
    @StatusID = 1,
    @GenreID = 2;


EXEC IssueBook 
    @BookID = '978-5-17-118366-7',
    @ReaderID = 1,
    @EmployeeID = 2;

EXEC ReturnBook 
    @BookOrderID = 1;


EXEC DeleteBook 
    @ISBN = '978-5-17-118366-7';
GO


--ФУНКЦИИ

CREATE FUNCTION GetBookCountByGenre(@GenreName VARCHAR(20))
RETURNS INT
AS
BEGIN
    DECLARE @BookCount INT;

    SELECT @BookCount = COUNT(*)
    FROM Books b
    JOIN Genres g ON b.GenreID = g.GenreID
    WHERE g.[Name] = @GenreName;

    RETURN @BookCount;
END;
GO

-- Пример вызова
SELECT 'Количество книг в жанре ''Фантастика'' равно ' + CAST(dbo.GetBookCountByGenre('Фантастика') AS VARCHAR(10));
GO

CREATE FUNCTION GetAverageReaderAgeByCategory(@CategoryName VARCHAR(30))
RETURNS FLOAT
AS
BEGIN
    DECLARE @AverageAge FLOAT;

    SELECT @AverageAge = AVG(DATEDIFF(YEAR, r.BirthDate, GETDATE()))
    FROM Readers r
    JOIN ReaderCategorys rc ON r.ReaderCategoryID = rc.ReaderCategoryID
    WHERE rc.[Name] = @CategoryName;

    RETURN @AverageAge;
END;
GO

-- Пример вызова
SELECT 'Средний возраст читателей категории ''Студент'' равен ' + CAST(dbo.GetAverageReaderAgeByCategory('Студент') AS VARCHAR(10));
GO

CREATE FUNCTION GetBooksIssuedToReader(@ReaderID INT)
RETURNS TABLE
AS
RETURN
(
    SELECT b.ISBN, b.Title, bo.BookOrderDate, bo.ReturnDate
    FROM Books b
    JOIN BookOrders bo ON b.ISBN = bo.BookID
    WHERE bo.ReaderID = @ReaderID
);
GO

-- Пример вызова
SELECT * FROM dbo.GetBooksIssuedToReader(2);
GO

CREATE FUNCTION GetBookOrdersByEmployee(@EmployeeID INT)
RETURNS INT
AS
BEGIN
    DECLARE @OrderCount INT;

    SELECT @OrderCount = COUNT(*)
    FROM BookOrders bo
    JOIN Employees e ON bo.EmployeeID = e.EmployeeID
    WHERE e.EmployeeID = @EmployeeID;

    RETURN @OrderCount;
END;
GO

-- Пример вызова
SELECT 'Заказов, оформленных сотрудником с ID 2: ' + CAST(dbo.GetBookOrdersByEmployee(2) AS VARCHAR(10));
GO

CREATE FUNCTION GetMostPopularGenre()
RETURNS VARCHAR(20)
AS
BEGIN
    DECLARE @MostPopularGenre VARCHAR(20);

    SELECT TOP 1 @MostPopularGenre = g.[Name]
    FROM Genres g
    JOIN Books b ON g.GenreID = b.GenreID
    JOIN BookOrders bo ON b.ISBN = bo.BookID
    GROUP BY g.[Name]
    ORDER BY COUNT(bo.BookID) DESC;

    RETURN @MostPopularGenre;
END;
GO

-- Пример вызова
SELECT 'Самый популярный жанр: ' + dbo.GetMostPopularGenre();
GO


--Представление для получения информации о книгах и их жанрах с количеством заказов

CREATE VIEW vw_BooksWithGenresAndOrderCount AS
SELECT 
    b.ISBN,
    b.Title,
    g.[Name] AS Genre,
    COUNT(bo.BookOrderID) AS OrderCount
FROM 
    Books b
JOIN 
    Genres g ON b.GenreID = g.GenreID
LEFT JOIN 
    BookOrders bo ON b.ISBN = bo.BookID
GROUP BY 
    b.ISBN, b.Title, g.[Name];
GO

--Представление для получения среднего возраста читателей по категориям

CREATE VIEW vw_AverageReaderAgeByCategory AS
SELECT 
    rc.[Name] AS CategoryName,
    AVG(DATEDIFF(YEAR, r.BirthDate, GETDATE())) AS AverageAge
FROM 
    ReaderCategorys rc
JOIN 
    Readers r ON rc.ReaderCategoryID = r.ReaderCategoryID
GROUP BY 
    rc.[Name];
GO


-- Представление для получения информации о сотрудниках и количестве выданных книг

CREATE VIEW vw_EmployeesWithIssuedBooksCount AS
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    COUNT(bo.BookOrderID) AS IssuedBooksCount
FROM 
    Employees e
LEFT JOIN 
    BookOrders bo ON e.EmployeeID = bo.EmployeeID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName;
GO

--  Представление для получения статуса книг по их издателям
CREATE VIEW vw_BooksStatusByPublisher AS
SELECT 
    p.[Name] AS PublisherName,
    b.Title,
    s.[Name] AS Status,
    COUNT(bo.BookOrderID) AS OrderCount
FROM 
    Publishers p
JOIN 
    Books b ON p.PublisherID = b.PublisherID
JOIN 
    Statuss s ON b.StatusID = s.StatusID
LEFT JOIN 
    BookOrders bo ON b.ISBN = bo.BookID
GROUP BY 
    p.[Name], b.Title, s.[Name];
GO

-- Представление для получения информации о читателях и количестве заказанных книг

CREATE VIEW vw_ReadersWithBookOrdersCount AS
SELECT 
    r.ReaderID,
    r.FirstName,
    r.LastName,
    COUNT(bo.BookOrderID) AS BookOrdersCount
FROM 
    Readers r
LEFT JOIN 
    BookOrders bo ON r.ReaderID = bo.ReaderID
GROUP BY 
    r.ReaderID, r.FirstName, r.LastName;
GO

-- Показать книги с жанрами и количеством заказов
SELECT * FROM vw_BooksWithGenresAndOrderCount;
GO

-- Показать средний возраст читателей по категориям
SELECT * FROM vw_AverageReaderAgeByCategory;
GO

-- Показать сотрудников и количество выданных книг
SELECT * FROM vw_EmployeesWithIssuedBooksCount;
GO

-- Показать статус книг по их издателям
SELECT * FROM vw_BooksStatusByPublisher;
GO

-- Показать читателей и количество заказанных книг
SELECT * FROM vw_ReadersWithBookOrdersCount;
GO
